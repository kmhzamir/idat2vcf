/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
        ext.when            = Conditional clause
----------------------------------------------------------------------------------------
*/

//
// SNV annotation options
//

process {

    withName: '.*ANNOTATE_GENOME_SNVS:BCFTOOLS_ROH' {
    ext.args = { 
        def probands = meta.probands ?: []
        def probands_list = probands ? "--samples ${probands.unique().first()}" : ""
        "${probands_list} --skip-indels"
    }
    ext.prefix = { "${meta.id}_roh" }
}

    withName: '.*ANNOTATE_GENOME_SNVS:RHOCALL_ANNOTATE' {
        ext.args = { "--v14 " }
        ext.prefix = { "${meta.id}_rohann" }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*ANNOTATE_GENOME_SNVS:ZIP_TABIX_ROHCALL' {
        ext.prefix = { "${input.simpleName}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*ANNOTATE_GENOME_SNVS:VCFANNO' {
        ext.prefix = { "${meta.id}_rohann_vcfanno" }
        publishDir = [
            enabled: false
        ]
    }

    /*withName: '.*ANNOTATE_GENOME_SNVS:UPD_SITES' {
        ext.prefix = { "${vcf.simpleName}_upd_sites" }
        ext.args = {"--af-tag GNOMADAF --proband ${meta.upd_child} --mother ${meta.mother} --father ${meta.father} sites"}
    }

    withName: '.*ANNOTATE_GENOME_SNVS:UPD_REGIONS' {
        ext.prefix = { "${vcf.simpleName}_upd_regions" }
        ext.args = {"--af-tag GNOMADAF --proband ${meta.upd_child} --mother ${meta.mother} --father ${meta.father} regions --min-size 5 --min-sites 1"}
        ext.when = { !(workflow.profile.tokenize(',').intersect(['test', 'test_one_sample']).size() >= 1) || workflow.stubRun }
    }

    withName: '.*ANNOTATE_GENOME_SNVS:CHROMOGRAPH_SITES' {
        ext.prefix = { "${sites.simpleName}_chromograph" }
        ext.args = { "--euploid" }
        tag =  {"${meta7.id}"}
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*ANNOTATE_GENOME_SNVS:CHROMOGRAPH_REGIONS' {
        ext.prefix = { "${regions.simpleName}_chromograph" }
        ext.args = { '--euploid' }
        ext.when = { !(workflow.profile.tokenize(',').intersect(['test', 'test_one_sample', 'test_sentieon']).size() >= 1) || workflow.stubRun }
        tag =  {"${meta6.id}"}
        publishDir = [
            enabled: false
        ]
    } */

    withName: '.*ANNOTATE_GENOME_SNVS:ZIP_TABIX_VCFANNO' {
        ext.prefix = { "${input.simpleName}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*ANNOTATE_GENOME_SNVS:BCFTOOLS_VIEW' {
        ext.prefix = { "${vcf.simpleName}_filter" }
        ext.args = { '--output-type z --exclude "INFO/GNOMADAF > 0.70 | INFO/GNOMADAF_popmax > 0.70" ' }
    }

    withName: '.*ANNOTATE_GENOME_SNVS:GATK4_SELECTVARIANTS' {
        ext.prefix = { "${vcf.simpleName}_${intervals.simpleName}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*ANNOTATE_GENOME_SNVS:ENSEMBLVEP_SNV' {
        ext.prefix = { "${meta.prefix}_vep_${meta.scatterid}" }
        ext.args = { [
            '--dir_plugins vep_cache_and_plugins/Plugins',
            '--plugin Inheritance,vep_cache_and_plugins/gene_inheritance_modes.tsv,1',
            '--distance 5000',
            '--buffer_size 20000',
            '--max_sv_size 248956422',
            '--appris --biotype --cache --canonical --ccds --compress_output bgzip',
            '--domains --exclude_predicted --force_overwrite',
            '--hgvs --humdiv --no_progress --no_stats --numbers',
            '--merged --polyphen b --protein --offline --regulatory --show_ref_allele --uploaded_allele --sift b --symbol --tsl --clin_sig_allele 0 --pubmed --allele_number --keep_csq --variant_class',
            '--uniprot --tab --fields "Uploaded_variation,Location,SYMBOL,InheritanceModesGene,PUBMED,clinvar_OMIM_id,"'
        ].join(' ') }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*ANNOTATE_GENOME_SNVS:BCFTOOLS_CONCAT' {
        ext.prefix = { "${meta.prefix}_vep" }
        publishDir = [
            enabled: false
        ]
    }

     withName: '.*PREPARE_REFERENCES' {
        ext.prefix = { "${meta.prefix}_vep" }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*ANNOTATE_GENOME_SNVS:TABIX_VEP' {
        ext.prefix = { "${meta.prefix}_vep" }
        ext.args = { '-p bed' }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*GENERATE_CLINICAL_SET_SNV:TABIX_TABIX' {
        ext.prefix = { "${meta.prefix}_vep" }
        ext.args = { '-p bed' }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*ANNOTATE_GENOME_SNVS:TABIX_BCFTOOLS_CONCAT' {
        ext.args = { '-p bed' }
        publishDir = [
            path: { "${params.outdir}/annotate_snv/genome/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE_GENOME_SNVS:ANNOTATE_RHOCALLVIZ:TABIX_TABIX' {
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*ANNOTATE_GENOME_SNVS:ANNOTATE_MICROARRAY' {
        publishDir = [
            path: { "${params.outdir}/final/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}